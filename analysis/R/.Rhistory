ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Response Time por Condición Experimental",
x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_discrete(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("""blue", "red")) +
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Response Time por Condición Experimental",
x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_discrete(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Response Time por Condición Experimental",
x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_discrete(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Response Time por Condición Experimental",
x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Gráfica de líneas para la variable score
ggplot(df, aes(x = trial_number, y = score, group = interaction(condition_tool, condition_unce), color = interaction(condition_tool, condition_unce))) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Score por Condición Experimental",
x = "Número de Ensayo",
y = "Score") +
scale_color_manual(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Gráfica de líneas para la variable score
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Score por Condición Experimental",
x = "Número de Ensayo",
y = "Score") +
scale_color_manual(name = "Complejidad",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(title = "Gráfico de Líneas de Response Time por Condición Experimental",
x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Gráfica de líneas para la variable score
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Score") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal() +
ggsave("graphs/trials_time.tiff")
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
ggsave("graphs/trials_time.tiff")
ggsave("D:/IGT/Results/Behavior/graphs/trials_time.tiff")
# Crea la gráfica de líneas usando ggplot y ggsmooth
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Tiempo de respuesta (ms)") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal() +
ggsave("D:/IGT/Results/Behavior/graphs/trials_time.tiff")
# Gráfica de líneas para la variable score
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Score") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal() +
ggsave("D:/IGT/Results/Behavior/graphs/trials_score.tiff")
# Gráfica de líneas para la variable score
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Número de Ensayo",
y = "Score") +
scale_color_manual(name = "Incertidumbre",
limits=c("LOWU","HIGU"),
labels = c("Baja","Alta","Null"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Sin","Con"),
values = c("dotted", "solid")) +
theme_minimal()
ggsave("D:/IGT/Results/Behavior/graphs/trials_score.tiff")
# Pregunta al usuario por el archivo de resultados
archivo_resultados <- "D:/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/Artículos escritos/Isaac_index/Data_renamed.csv"
# Carga el dataframe desde el archivo CSV
df <- read.csv(archivo_resultados)
#Elimina columas de datos individuales de las escalas
df <- df[-c(7:16,21:30)]
#Filtra datos por conditiones
df %>%
filter(Stage == 1) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_CON
pacman::p_load(tidyverse, ggplot2, ez, corrplot)
# Pregunta al usuario por el archivo de resultados
archivo_resultados <- "D:/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/Artículos escritos/Isaac_index/Data_renamed.csv"
# Carga el dataframe desde el archivo CSV
df <- read.csv(archivo_resultados)
#Elimina columas de datos individuales de las escalas
df <- df[-c(7:16,21:30)]
#Filtra datos por conditiones
df %>%
filter(Stage == 1) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_CON
df %>%
filter(Stage == 2) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_UNC
df %>%
filter(Stage == 3) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_AIT
#Matriz de correlación
MCON<-cor(data_CON)
MUNC<-cor(data_UNC)
MAIT<-cor(data_AIT)
#significacncia de la correlación
testRes_CON = cor.mtest(data_CON, conf.level = 0.95)
testRes_UNC = cor.mtest(data_UNC, conf.level = 0.95)
testRes_AIT = cor.mtest(data_AIT, conf.level = 0.95)
corrplot(MCON, method="color")
corrplot(MUNC, method="color")
corrplot(MAIT, method="color")
corrplot(MCON, p.mat = testRes_CON$p, sig.level = 0.10, order = 'hclust', addrect = 2)
corrplot(MUNC, p.mat = testRes_UNC$p, sig.level = 0.10, order = 'hclust', addrect = 2)
corrplot(MAIT, p.mat = testRes_AIT$p, sig.level = 0.10, order = 'hclust', addrect = 2)
corrplot(MAIT, p.mat = testRes_AIT$order = 'hclust', addrect = 2)
corrplot(MAIT, p.mat = testRes_AIT$p, order = 'hclust', addrect = 2)
corrplot(MUNC, p.mat = testRes_UNC$p, order = 'hclust', addrect = 2)
corrplot(MCON, p.mat = testRes_CON$p, order = 'hclust', addrect = 2)
corrplot(MCON, p.mat = testRes_CON$p, order = 'hclust', addrect = 2)
corrplot(MUNC, p.mat = testRes_UNC$p, order = 'hclust', addrect = 2)
corrplot(MAIT, p.mat = testRes_AIT$p, order = 'hclust', addrect = 2)
# Instala e carga los paquetes necesarios
pacman::p_load(tidyverse, ggplot2, ez, corrplot)
# Pregunta al usuario por el archivo de resultados
archivo_resultados <- "D:/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/Artículos escritos/Isaac_index/Data_renamed.csv"
# Carga el dataframe desde el archivo CSV
df <- read.csv(archivo_resultados)
View(df)
# Pregunta al usuario por el archivo de resultados
archivo_resultados <- "D:/OneDrive - Instituto Tecnologico y de Estudios Superiores de Monterrey/Artículos escritos/Isaac_index/Data_renamed.csv"
# Carga el dataframe desde el archivo CSV
df <- read.csv(archivo_resultados)
#Elimina columas de datos individuales de las escalas
df <- df[-c(7:16,21:30)]
View(df)
df %>%
select(-Hits) -> df
View(df)
#Filtra datos por conditiones
df %>%
filter(Stage == 1) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_CON
df %>%
filter(Stage == 2) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_UNC
df %>%
filter(Stage == 3) %>%
select(-Participant, -Sexo, -Edad, -Stage, -Rate) -> data_AIT
#Matriz de correlación
MCON<-cor(data_CON)
MUNC<-cor(data_UNC)
MAIT<-cor(data_AIT)
#significacncia de la correlación
testRes_CON = cor.mtest(data_CON, conf.level = 0.95)
testRes_UNC = cor.mtest(data_UNC, conf.level = 0.95)
testRes_AIT = cor.mtest(data_AIT, conf.level = 0.95)
corrplot(MCON, method="color")
corrplot(MUNC, method="color")
corrplot(MAIT, method="color")
corrplot(MCON, p.mat = testRes_CON$p, order = 'hclust', addrect = 2)
corrplot(MUNC, p.mat = testRes_UNC$p, order = 'hclust', addrect = 2)
corrplot(MAIT, p.mat = testRes_AIT$p, order = 'hclust', addrect = 2)
library(corrplot)
# Install and load the necessary packages
pacman::p_load(tidyverse, ggplot2, ez)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# # Load the results file
df <- read.csv("D:/GitHub/NeuroAIT_DecisionMakingData/data/behavior/behavior_data.csv")
# Add a new variable trial_number
df$trial_number <- df$trials.thisRepN + 1
# Convert the variables to factors for grouping
df$condition_tool <- as.factor(df$condition_tool)
df$condition_unce <- as.factor(df$condition_unce)
# Average all participants for each trial
df %>%
group_by(condition_tool, condition_unce, trial_number) %>%
summarise(response_time_mean = mean(response_time),
score_mean = mean(score),
wins_mean = mean(wins)) -> df_by_trial
# Obtain the averages for each participant
df %>%
group_by(ID, condition_tool, condition_unce) %>%
summarise(response_time_mean = mean(response_time),
score_mean = mean(score),
wins_mean = mean(wins)) -> df_means
# Create the line graph using ggplot and ggsmooth
ggplot(df_by_trial, aes(x = trial_number,
y = response_time_mean,
color = condition_unce,
linetype = condition_tool)) +
geom_line() +
labs(x = "Trial number",
y = "Reponse time (ms)") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
ggsave("results/trials_time_line.jpg")
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Trial number",
y = "Reponse time (ms)") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Trial number",
y = "Score") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
View(df)
# # Load the results file
df <- read.csv("D:/IGT/full_experiment/behavior_data.csv")
View(df)
# Add a new variable trial_number
df$trial_number <- df$trials.thisRepN + 1
# Convert the variables to factors for grouping
df$condition_tool <- as.factor(df$condition_tool)
df$condition_unce <- as.factor(df$condition_unce)
# Average all participants for each trial
df %>%
group_by(condition_tool, condition_unce, trial_number) %>%
summarise(response_time_mean = mean(response_time),
score_mean = mean(score),
wins_mean = mean(wins)) -> df_by_trial
# Obtain the averages for each participant
df %>%
group_by(ID, condition_tool, condition_unce) %>%
summarise(response_time_mean = mean(response_time),
score_mean = mean(score),
wins_mean = mean(wins)) -> df_means
ggplot(df_by_trial, aes(x = trial_number,
y = score_mean,
color = condition_unce,
linetype = condition_tool)) +
geom_line() +
labs(x = "Trial number",
y = "Score") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
ggplot(df, aes(x = trial_number,
y = score,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Trial number",
y = "Score") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
# Create the line graph using ggplot and ggsmooth
ggplot(df_by_trial, aes(x = trial_number,
y = response_time_mean,
color = condition_unce,
linetype = condition_tool)) +
geom_line() +
labs(x = "Trial number",
y = "Reponse time (ms)") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
ggplot(df, aes(x = trial_number,
y = response_time,
color = condition_unce,
linetype = condition_tool)) +
geom_smooth() +
labs(x = "Trial number",
y = "Reponse time (ms)") +
scale_color_manual(name = "Complexity",
limits=c("LOWU","HIGU"),
labels = c("Low","High"),
values = c("blue", "red")) +
scale_linetype_manual(name = "AIT",
limits=c("NAIT","WAIT"),
labels = c("Without","With"),
values = c("dotted", "solid")) +
theme_minimal()
# Obtain the averages for each participant
df %>%
group_by(ID, condition_tool, condition_unce) %>%
summarise(response_time_mean = mean(response_time),
score_mean = mean(score),
wins_mean = mean(wins)) -> df_means
##Gráficasinteracción
###Colapsa las medias por celda
df_ANOVA <-  df_means %>%
group_by(condition_tool,condition_unce) %>%
summarise(score_mean_ANOVA = mean(score_mean),
response_time_mean_ANOVA = mean(response_time_mean))
View(df_ANOVA)
ANOVA_score <- ezANOVA(data = df_means, dv = score_mean,
wid = ID, within = .(condition_tool,condition_unce))
View(ANOVA_score)
View(ANOVA_score[["ANOVA"]])
# ANOVA with the ez package
ANOVA_response_time <- ezANOVA(data = df_means, dv = response_time_mean,
wid = ID, within = .(condition_tool,condition_unce))
View(ANOVA_response_time)
View(ANOVA_response_time[["ANOVA"]])
